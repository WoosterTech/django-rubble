{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#django-rubble","title":"django-rubble","text":""},{"location":"#description","title":"Description","text":"<p>Extend django-model-utils and django-extensions.</p> <p>Version 0.4.0 code got deleted but still exists on PyPI.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Serialized Number Generation (e.g. PN-0001, PN-0001; MY1, MY2)<ul> <li><code>NumberedModel</code></li> </ul> </li> <li>Useful Model and Form fields<ul> <li><code>SimplePercentageField</code></li> </ul> </li> <li>Several Useful Utility Functions<ul> <li><code>is_number</code>: checks if number could be coerced to a <code>float</code></li> <li><code>ratio_to_whole</code>: .1 to 10; useful for percentages to \"human\"</li> <li><code>whole_to_ratio</code>: 10 to .1; useful for \"human\" to \"percentages\"</li> <li>perhaps others, see docs when they're published</li> </ul> </li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#from-pypi","title":"From PyPI","text":"<p><code>pip install django-rubble</code></p>"},{"location":"#from-github-for-development","title":"From GitHub (for development)","text":"<ol> <li>Clone the repository: <code>git clone https://github.com/WoosterTech/django-rubble.git</code></li> <li>Install the dependencies: <code>poetry install</code></li> </ol>"},{"location":"#usage","title":"Usage","text":"<p>Simply use the functions, fields, models.</p> <p>The biggest \"gotcha\" is that <code>NamedSerialNumber</code> needs to be imported in your <code>urls.py</code> file; not actually sure why, perhaps someone can help me with that?</p> <p>To use the automatic numbering, subclass <code>NumberedModel</code> and make sure to include a <code>number_config = SerialNumberConfig(...)</code> attribute. It will set defaults, but just as a standard integer starting at \"1\" with no prefix.</p> <pre><code>class PartNumber(NumberedModel):\n    name = models.CharField(\"Part Description\", max_length=100)\n    number_config = SerialNumberConfig(\n        initial_value=10, prefix=\"PN-\", width=4\n    )\n</code></pre> <p>Numbers will be generated starting with \"PN-0010\" (note the padding to make a width of 4) and increment by the default step of \"1.\"</p> <p>Contributions are welcome! Please follow the guidelines in contributing</p> <p>This project is licensed under the MIT License.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>Author: Karl Wooster</li> <li>Email: karl@woostertech.com</li> <li>Website: woostertech.com</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT (see License)</p>"},{"location":"#contributing","title":"Contributing","text":"<p>See contributing</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#060-2024-09-17","title":"0.6.0 (2024-09-17)","text":""},{"location":"changelog/#feat","title":"Feat","text":"<ul> <li>context: cache versions in ProjectRegistry to avoid db hits before apps are ready</li> </ul>"},{"location":"changelog/#052-2024-08-30","title":"0.5.2 (2024-08-30)","text":""},{"location":"changelog/#051-2024-08-29","title":"0.5.1 (2024-08-29)","text":""},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li>models: remove TestNumberModel</li> </ul>"},{"location":"changelog/#050-2024-08-29","title":"0.5.0 (2024-08-29)","text":""},{"location":"changelog/#feat_1","title":"Feat","text":"<ul> <li>django: support django 5.1</li> </ul>"},{"location":"changelog/#050b1-2024-08-22","title":"0.5.0b1 (2024-08-22)","text":""},{"location":"changelog/#feat_2","title":"Feat","text":"<ul> <li>neapolitan: add enums and other helpers to work with neapolitan-sundae</li> </ul>"},{"location":"changelog/#050b0-2024-07-17","title":"0.5.0b0 (2024-07-17)","text":""},{"location":"changelog/#feat_3","title":"Feat","text":"<ul> <li>numbers: add \"any_to_float\" function</li> </ul>"},{"location":"changelog/#042-2024-06-25","title":"0.4.2 (2024-06-25)","text":""},{"location":"changelog/#fix_1","title":"Fix","text":"<ul> <li>db_forms: use named argument for <code>Percent</code> to satisfy BaseModel</li> </ul>"},{"location":"changelog/#041-2024-06-25","title":"0.4.1 (2024-06-25)","text":""},{"location":"changelog/#040-2024-06-25","title":"0.4.0 (2024-06-25)","text":""},{"location":"changelog/#feat_4","title":"Feat","text":"<ul> <li>number: add numbers as a new model with admin</li> </ul>"},{"location":"changelog/#030-2024-06-19","title":"0.3.0 (2024-06-19)","text":""},{"location":"changelog/#feat_5","title":"Feat","text":"<ul> <li>stamped_admin: add StampedTabularInline</li> </ul>"},{"location":"changelog/#023-2024-06-05","title":"0.2.3 (2024-06-05)","text":""},{"location":"changelog/#fix_2","title":"Fix","text":"<ul> <li>pyproject: fix django constraint again</li> <li>pyproject: add metadata for pypi and \"fix\" django deps</li> </ul>"},{"location":"changelog/#022-2024-06-02","title":"0.2.2 (2024-06-02)","text":""},{"location":"changelog/#refactor","title":"Refactor","text":"<ul> <li>functions: simplification of some number functions to better utilize Decimal methods</li> </ul>"},{"location":"changelog/#021-2024-06-02","title":"0.2.1 (2024-06-02)","text":""},{"location":"changelog/#fix_3","title":"Fix","text":"<ul> <li>django-version: previous change didn't allow django &gt;5.0 :clown_face:</li> </ul>"},{"location":"changelog/#refactor_1","title":"Refactor","text":"<ul> <li>rename-package: from django-utils (already taken) to django-rubble</li> </ul>"},{"location":"changelog/#020-2024-05-30","title":"0.2.0 (2024-05-30)","text":""},{"location":"changelog/#feat_6","title":"Feat","text":"<ul> <li>percentage_field: add percentage field as model field with form field and Percent type</li> </ul>"},{"location":"changelog/#fix_4","title":"Fix","text":"<ul> <li>django-version: was ~5.0 which doesn't work with 4.x versions... changed to &lt;=5.0</li> </ul>"},{"location":"contributing/","title":"Contributing to django-rubble","text":"<p>THIS IS CURRENTLY JUST A STARTER FILE, PLEASE USE COMMON SENSE OR FIX IT!</p> <p>Welcome to the [Project Name] project! We appreciate your interest in contributing. This document outlines the guidelines and steps for contributing to this project. - Getting Started - Contributing Guidelines - Code Style - Submitting a Pull Request</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>To get started with contributing, follow these steps: 1. Fork the repository. 2. Clone the forked repository to your local machine. 3. Install any necessary dependencies. 4. Create a new branch for your changes.</p>"},{"location":"contributing/#contributing-guidelines","title":"Contributing Guidelines","text":"<p>Please follow these guidelines when contributing to the project: - [Guideline 1] - [Guideline 2] - [Guideline 3]</p>"},{"location":"contributing/#code-style","title":"Code Style","text":"<p>We follow a specific code style in this project. Please ensure your code adheres to the style guidelines. You can find the style guide fix this. When you're ready to submit your changes, follow these steps: 1. Commit your changes with descriptive commit messages. 2. Push your changes to your forked repository. 3. Open a pull request from your forked repository to the main repository. 4. Provide a clear and concise description of your changes in the pull request.</p>"},{"location":"contributing/#submitting-a-pull-request","title":"Submitting a Pull Request","text":""},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":""},{"location":"checks/errors/","title":"Errors","text":""},{"location":"checks/errors/#models","title":"Models","text":"<ul> <li>django_rubble.M001: Name not found on model</li> <li>django_rubble.M002: Missing or invalid field on model</li> </ul>"},{"location":"checks/messages/","title":"Messages","text":""},{"location":"checks/messages/#django_rubble.checks.messages","title":"<code>django_rubble.checks.messages</code>","text":"<p>Message functions for the checks module.</p> <p>This module provides functions that return error messages for the checks module.</p> <p>Available functions:</p> <ul> <li>must_be: Return a list of errors for a missing or incorrect option value.</li> <li>refer_to_missing_field: Return a list of errors for a missing field.</li> </ul>"},{"location":"checks/messages/#django_rubble.checks.messages.must_be","title":"<code>must_be(type_description, option, obj, error_id)</code>","text":"<p>Return a list of errors for a missing or incorrect option value.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; must_be(\"a list\", \"natural_key_fields\", cls, \"rubble.E002\")\n[Error: The value of 'natural_key_fields' must be a list.]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>type_description</code> <code>str</code> <p>The description of the required type.</p> required <code>option</code> <code>str</code> <p>The name of the option.</p> required <code>obj</code> <code>object</code> <p>The object to which the option belongs.</p> required <code>error_id</code> <code>str</code> <p>The error ID.</p> required <p>Returns:</p> Type Description <code>list[Error]</code> <p>list[Error]: A list of errors</p> Source code in <code>django_rubble\\checks\\messages.py</code> <pre><code>def must_be(\n    type_description: str, option: str, obj: object, error_id: str\n) -&gt; list[checks.Error]:\n    \"\"\"Return a list of errors for a missing or incorrect option value.\n\n    Examples:\n        &gt;&gt;&gt; must_be(\"a list\", \"natural_key_fields\", cls, \"rubble.E002\")\n        [Error: The value of 'natural_key_fields' must be a list.]\n\n    Args:\n        type_description (str): The description of the required type.\n        option (str): The name of the option.\n        obj (object): The object to which the option belongs.\n        error_id (str): The error ID.\n\n    Returns:\n        list[Error]: A list of errors\n    \"\"\"\n    return [\n        checks.Error(\n            f\"The value of '{option}' must be {type_description}.\",\n            obj=obj.__class__,\n            id=error_id,\n        ),\n    ]\n</code></pre>"},{"location":"checks/messages/#django_rubble.checks.messages.refer_to_missing_field","title":"<code>refer_to_missing_field(field_name, option, obj, error_id)</code>","text":"<p>Return a list of errors for a missing field.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; refer_to_missing_field(\"foo\", \"bar\", MyModel, \"rubble.E003\")\n[Error: The value of 'bar' refers to 'foo', which is not a field of 'MyModel'.]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>field_name</code> <code>str</code> <p>The name of the missing field.</p> required <code>option</code> <code>str</code> <p>The name of the option.</p> required <code>obj</code> <code>type[Model]</code> <p>The model to which the option belongs.</p> required <code>error_id</code> <code>str</code> <p>The error ID.</p> required <p>Returns:</p> Type Description <code>list[Error]</code> <p>list[Error]: A list of errors</p> Source code in <code>django_rubble\\checks\\messages.py</code> <pre><code>def refer_to_missing_field(\n    field_name: str, option: str, obj: type[models.Model], error_id: str\n) -&gt; list[checks.Error]:\n    \"\"\"Return a list of errors for a missing field.\n\n    Examples:\n        &gt;&gt;&gt; refer_to_missing_field(\"foo\", \"bar\", MyModel, \"rubble.E003\")\n        [Error: The value of 'bar' refers to 'foo', which is not a field of 'MyModel'.]\n\n    Args:\n        field_name (str): The name of the missing field.\n        option (str): The name of the option.\n        obj (type[models.Model]): The model to which the option belongs.\n        error_id (str): The error ID.\n\n    Returns:\n        list[Error]: A list of errors\n    \"\"\"\n    return [\n        checks.Error(\n            f\"The value of '{option}' refers to '{field_name}',\"\n            f\" which is not a field of '{get_model_label(obj)}'.\",\n            obj=obj,\n            id=error_id,\n        ),\n    ]\n</code></pre>"},{"location":"fields/db_fields/","title":"Django","text":""},{"location":"fields/db_fields/#django_rubble.fields.db_fields","title":"<code>django_rubble.fields.db_fields</code>","text":""},{"location":"fields/db_fields/#django_rubble.fields.db_fields.SimplePercentageField","title":"<code>SimplePercentageField</code>","text":"<p>               Bases: <code>DecimalField</code></p> <p>Enter and display percentages out of 100 but store them out of 1 in db as decimals</p> <p>Because this is based on <code>models.DecimalField</code>, <code>decimal_places</code> applies to what is stored in the db (/1), not what is shown or typed in (/100). With that said, add two (2) to whatever is desired in the form for proper validation.</p> Source code in <code>django_rubble\\fields\\db_fields.py</code> <pre><code>class SimplePercentageField(models.DecimalField):\n    \"\"\"Enter and display percentages out of 100 but store them out of 1\n    in db as decimals\n\n    Because this is based on `models.DecimalField`, `decimal_places` applies to what is\n    stored in the db (/1), not what is shown or typed in (/100). With that said, add two\n    (2) to whatever is desired in the form for proper validation.\n    \"\"\"\n\n    description = _(\n        \"percentage (max {max_digits} digits; {decimal_places} decimal places\"\n    )\n    log_name = \"models.PercentageField\"\n\n    def __init__(\n        self,\n        verbose_name=None,\n        name=None,\n        max_digits=None,\n        decimal_places=None,\n        **kwargs,\n    ):\n        if decimal_places is not None:\n            self.humanize_decimal_places = int(decimal_places) - 2\n        else:\n            self.humanize_decimal_places = None\n\n        kwargs.update(\n            {\n                \"max_digits\": max_digits,\n                \"decimal_places\": decimal_places,\n            }\n        )\n\n        super().__init__(verbose_name, name, **kwargs)\n\n    def formfield(self, **kwargs):\n        defaults = {\"form_class\": SimplePercentageFormField}\n        if self.decimal_places is not None:\n            kwargs.update(decimal_places=self.decimal_places - 2)\n\n        defaults.update(kwargs)\n\n        return super().formfield(**defaults)\n</code></pre>"},{"location":"models/number_models/","title":"Number models","text":""},{"location":"models/number_models/#django_rubble.models.number_models.NumberedModel","title":"<code>django_rubble.models.number_models.NumberedModel</code>","text":"<p>               Bases: <code>Model</code></p> <p>Adds a <code>number</code> field that uses <code>DocumentNumber</code> to generate values.</p> <p>Adds a <code>natural_key</code> method to the model, but no manager that uses it.</p> <p>Example:</p> <pre><code>class Invoice(NumberedModel):\n    number_config = SerialNumberConfig(\n            prefix=\"INV\",\n            width=4,\n            initial_value=1,\n            step=1\n        )\n</code></pre> <p>Attributes:</p> Name Type Description <code>number_config</code> <code>SerialNumberConfig</code> <p>A SerialNumberConfig instance.</p> Source code in <code>django_rubble\\models\\number_models.py</code> <pre><code>class NumberedModel(models.Model):\n    \"\"\"Adds a `number` field that uses `DocumentNumber` to generate values.\n\n    Adds a `natural_key` method to the model, but no manager that uses it.\n\n    Example:\n\n        class Invoice(NumberedModel):\n            number_config = SerialNumberConfig(\n                    prefix=\"INV\",\n                    width=4,\n                    initial_value=1,\n                    step=1\n                )\n\n    Attributes:\n        number_config: A SerialNumberConfig instance.\n    \"\"\"\n\n    number = models.CharField(_(\"number\"), unique=True, max_length=10, editable=False)\n    number_config: SerialNumberConfig\n\n    class Meta:\n        abstract = True\n\n    def save(self, *args, **kwargs) -&gt; None:\n        if self._state.adding:\n            self.number, _ = NamedSerialNumber.objects.get_serial_number(self)\n            msg = f\"New number is: {self.number}\"\n            logger.debug(msg)\n        return super().save(*args, **kwargs)\n\n    def natural_key(self):\n        return (self.number,)\n\n    @classmethod\n    def check(cls, **kwargs):\n        errors = super().check(**kwargs)\n        errors.extend(cls._check_number_config(**kwargs))\n        return errors\n\n    @classmethod\n    def _check_number_config(cls, **kwargs):\n        if not hasattr(cls, \"number_config\"):\n            return must_be(\n                \"a SerialNumberConfig instance\",\n                option=\"number_config\",\n                obj=cls,\n                error_id=\"rubble.M003\",\n            )\n        if not isinstance(cls.number_config, SerialNumberConfig):\n            return must_be(\n                \"a SerialNumberConfig instance\",\n                option=\"number_config\",\n                obj=cls,\n                error_id=\"rubble.M003\",\n            )\n        return []\n</code></pre>"},{"location":"models/number_models/#django_rubble.models.number_models.SerialNumberConfig","title":"<code>django_rubble.models.number_models.SerialNumberConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for NumberModel numbering.</p> Example <p><code>SerialNumberConfig(prefix=\"INV\", width=4, initial_value=1, step=1)</code> -&gt; <code>INV0001</code>, <code>INV0002</code>, etc.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str | None</code> <p>The name of the model, used for NamedSerialNumber.</p> <code>initial_value</code> <code>int</code> <p>The starting value for the serial number.</p> <code>step</code> <code>int</code> <p>The increment value for the serial number.</p> <code>prefix</code> <code>str</code> <p>The prefix for the serial number.</p> Source code in <code>django_rubble\\models\\number_models.py</code> <pre><code>class SerialNumberConfig(BaseModel):\n    \"\"\"Configuration for NumberModel numbering.\n\n    Example:\n        `SerialNumberConfig(prefix=\"INV\", width=4, initial_value=1, step=1)` -&gt;\n        `INV0001`, `INV0002`, etc.\n\n    Attributes:\n        name: The name of the model, used for NamedSerialNumber.\n        initial_value: The starting value for the serial number.\n        step: The increment value for the serial number.\n        prefix: The prefix for the serial number.\"\"\"\n\n    name: str | None = None\n    initial_value: int = 1\n    step: int = 1\n    prefix: str\n    width: int\n</code></pre>"},{"location":"utils/default_funcs/","title":"Default funcs","text":""},{"location":"utils/default_funcs/#django_rubble.utils.default_funcs","title":"<code>django_rubble.utils.default_funcs</code>","text":"<p>Useful functions for default values in Django models.</p>"},{"location":"utils/default_funcs/#django_rubble.utils.default_funcs.django_now","title":"<code>django_now()</code>","text":"<p>Return the current datetime in the timezone of the Django settings.</p> <p>Example:</p> <p>from django_rubble.utils.default_funcs import django_now django_now() datetime.datetime(2021, 1, 1, 0, 0, tzinfo=) Source code in <code>django_rubble\\utils\\default_funcs.py</code> <pre><code>def django_now() -&gt; datetime:\n    \"\"\"Return the current datetime in the timezone of the Django settings.\n\n    Example:\n    &gt;&gt;&gt; from django_rubble.utils.default_funcs import django_now\n    &gt;&gt;&gt; django_now()\n    datetime.datetime(2021, 1, 1, 0, 0, tzinfo=&lt;UTC&gt;)\n    \"\"\"\n    return timezone.now()\n</code></pre>"},{"location":"utils/default_funcs/#django_rubble.utils.default_funcs.django_today","title":"<code>django_today()</code>","text":"<p>Return the current date in the timezone of the Django settings.</p> Example <p>from django_rubble.utils.default_funcs import django_today django_today() datetime.date(2021, 1, 1)</p> Source code in <code>django_rubble\\utils\\default_funcs.py</code> <pre><code>def django_today() -&gt; date:\n    \"\"\"Return the current date in the timezone of the Django settings.\n\n    Example:\n        &gt;&gt;&gt; from django_rubble.utils.default_funcs import django_today\n        &gt;&gt;&gt; django_today()\n        datetime.date(2021, 1, 1)\n    \"\"\"\n    return timezone.now().date()\n</code></pre>"},{"location":"utils/enums/","title":"Enums","text":""},{"location":"utils/enums/#django_rubble.utils.enums","title":"<code>django_rubble.utils.enums</code>","text":""},{"location":"utils/enums/#django_rubble.utils.enums.Icon","title":"<code>Icon</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Icon model for use in the application.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the icon.</p> required <code>snippet</code> <code>str</code> <p>The HTML snippet for the icon.</p> <code>''</code> <code>svg</code> <code>str</code> <p>The SVG snippet for the icon.</p> <code>''</code> <code>toolkit</code> <code>str | None</code> <p>The toolkit for the icon.</p> <code>None</code> Example <p><code>Icon(     name=\"pen-fill\",     snippet=\"&lt;i class='bi bi-pen-fill'&gt;&lt;/i&gt;\",     toolkit=\"bootstrap\" )</code></p> Source code in <code>django_rubble\\utils\\enums.py</code> <pre><code>class Icon(BaseModel):\n    \"\"\"Icon model for use in the application.\n\n    Example:\n        `Icon(\n            name=\"pen-fill\",\n            snippet=\"&lt;i class='bi bi-pen-fill'&gt;&lt;/i&gt;\",\n            toolkit=\"bootstrap\"\n        )`\n    \"\"\"\n\n    name: str = Field(description=\"The name of the icon.\")\n    snippet: str = Field(default=\"\", description=\"The HTML snippet for the icon.\")\n    svg: str = Field(default=\"\", description=\"The SVG snippet for the icon.\")\n    toolkit: str | None = Field(default=None, description=\"The toolkit for the icon.\")\n\n    def __str__(self) -&gt; str:\n        return self.name\n\n    @model_validator(mode=\"after\")\n    def check_snippet_or_svg(self):\n        assert not (self.snippet == \"\" and self.svg == \"\")\n        return self\n\n    @model_serializer\n    def serialize_model(self):\n        if self.has_svg:\n            return {\"name\": self.name, \"snippet\": self.svg}\n        return {\"name\": self.name, \"snippet\": self.snippet}\n\n    @property\n    def has_snippet(self) -&gt; bool:\n        return self.snippet is not None\n\n    @property\n    def has_svg(self) -&gt; bool:\n        return self.svg is not None\n\n    @property\n    def html(self):\n        return self.svg if self.has_svg else self.snippet\n</code></pre>"},{"location":"utils/enums/#django_rubble.utils.enums.LibraryIcon","title":"<code>LibraryIcon</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>HTML referencing icon.</p> <p>Must include library if required (e.g. for bootstrap/font-awesome/etc.)</p> <p>Example include:</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\" /&gt;\n</code></pre> <p>Attributes:</p> Name Type Description <code>PENCIL</code> <p>Edit icon.</p> <code>TRASH_CAN</code> <p>Delete icon.</p> <code>PLUS_CIRCLE</code> <p>Create icon.</p> <code>ENVELOPE_OPEN</code> <p>Detail icon.</p> <code>LIST_UL</code> <p>List icon.</p> <code>DATABASE_FILL_GEAR</code> <p>Admin icon.</p> <code>CLOCK_HISTORY</code> <p>History icon.</p> <code>ARROWS_COLLAPSE</code> <p>Expand icon.</p> <code>ARROW_CLOCKWISE</code> <p>Refresh icon.</p> <code>CHECK</code> <p>Check icon.</p> <code>X</code> <p>X icon.</p> <code>BOX_ARROW_UP</code> <p>Check out icon.</p> <code>BOX_ARROW_IN_DOWN</code> <p>Check in icon.</p> <code>UPDATE</code> <p>Edit icon.</p> <code>ADMIN</code> <p>Admin icon.</p> <code>DELETE</code> <p>Delete icon.</p> <code>CREATE</code> <p>Create icon.</p> <code>DETAIL</code> <p>Detail icon.</p> <code>LIST</code> <p>List icon.</p> <code>HISTORY</code> <p>History icon.</p> <code>CHECKOUT</code> <p>Check out icon.</p> <code>CHECKIN</code> <p>Check in icon.</p> Source code in <code>django_rubble\\utils\\enums.py</code> <pre><code>class LibraryIcon(StrEnum):\n    \"\"\"HTML referencing icon.\n\n    Must include library if required (e.g. for bootstrap/font-awesome/etc.)\n\n\n    Example include:\n    ```\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\" /&gt;\n    ```\n\n    Attributes:\n        PENCIL: Edit icon.\n        TRASH_CAN: Delete icon.\n        PLUS_CIRCLE: Create icon.\n        ENVELOPE_OPEN: Detail icon.\n        LIST_UL: List icon.\n        DATABASE_FILL_GEAR: Admin icon.\n        CLOCK_HISTORY: History icon.\n        ARROWS_COLLAPSE: Expand icon.\n        ARROW_CLOCKWISE: Refresh icon.\n        CHECK: Check icon.\n        X: X icon.\n        BOX_ARROW_UP: Check out icon.\n        BOX_ARROW_IN_DOWN: Check in icon.\n        UPDATE: Edit icon.\n        ADMIN: Admin icon.\n        DELETE: Delete icon.\n        CREATE: Create icon.\n        DETAIL: Detail icon.\n        LIST: List icon.\n        HISTORY: History icon.\n        CHECKOUT: Check out icon.\n        CHECKIN: Check in icon.\n    \"\"\"  # noqa: E501\n\n    PENCIL = PENCIL.snippet\n    TRASH_CAN = \"&lt;i class='bi bi-trash2'&gt;&lt;/i&gt;\"\n    PLUS_CIRCLE = '&lt;i class=\"bi bi-plus-circle\"&gt;&lt;/i&gt;'\n    ENVELOPE_OPEN = '&lt;i class=\"bi bi-envelope-open\"&gt;&lt;/i&gt;'\n    LIST_UL = '&lt;i class=\"bi bi-list-ul\"&gt;&lt;/i&gt;'\n    DATABASE_FILL_GEAR = '&lt;i class=\"bi bi-database-fill-gear\"&gt;&lt;/i&gt;'\n    CLOCK_HISTORY = CLOCK_HISTORY.snippet\n    ARROWS_COLLAPSE = ARROWS_COLLAPSE.snippet\n    ARROW_CLOCKWISE = '&lt;i class=\"bi bi-arrow-clockwise\"&gt;&lt;/i&gt;'\n    CHECK = '&lt;i class=\"bi bi-check2-square\"&gt;'\n    X = '&lt;i class=\"bi bi-x\"&gt;&lt;/i&gt;'\n    BOX_ARROW_UP = '&lt;i class=\"bi bi-box-arrow-up\"&gt;&lt;/i&gt;'\n    BOX_ARROW_IN_DOWN = '&lt;i class=\"bi bi-box-arrow-in-down\"&gt;&lt;/i&gt;'\n\n    UPDATE = PENCIL\n    ADMIN = DATABASE_FILL_GEAR\n    DELETE = TRASH_CAN\n    CREATE = PLUS_CIRCLE\n    DETAIL = ENVELOPE_OPEN\n    LIST = LIST_UL\n    HISTORY = CLOCK_HISTORY\n    CHECKOUT = BOX_ARROW_UP\n    CHECKIN = BOX_ARROW_IN_DOWN\n</code></pre>"},{"location":"utils/model_helpers/","title":"Model helpers","text":""},{"location":"utils/model_helpers/#django_rubble.utils.model_helpers","title":"<code>django_rubble.utils.model_helpers</code>","text":""},{"location":"utils/model_helpers/#django_rubble.utils.model_helpers.get_model_fields","title":"<code>get_model_fields(model, *, fields=None, exclude=None)</code>","text":"<p>Returns list of fields from model.</p> <p>Cannot include both fields and exclude.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>type[Model]</code> <p>the model to get fields from</p> required <code>fields</code> <code>list[str] | None</code> <p>list of fields to include, default is None</p> <code>None</code> <code>exclude</code> <code>list[str] | None</code> <p>list of fields to exclude, default is None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Field]</code> <p>list of fields</p> Source code in <code>django_rubble\\utils\\model_helpers.py</code> <pre><code>def get_model_fields(\n    model: type[Model],\n    *,\n    fields: list[str] | None = None,\n    exclude: list[str] | None = None,\n) -&gt; list[Field]:\n    \"\"\"Returns list of fields from model.\n\n    Cannot include both fields and exclude.\n\n    Args:\n      model: the model to get fields from\n      fields: list of fields to include, default is None\n      exclude: list of fields to exclude, default is None\n\n    Returns:\n      list of fields\n    \"\"\"\n    if fields is not None and exclude is not None:\n        msg = \"Cannot specify both 'fields' and 'exclude'.\"\n        raise ValueError(msg)\n\n    field_list_full = cast(list[Field], list(model._meta.fields))  # noqa: SLF001  # `_meta` is private\n\n    if fields is not None:\n        return [model._meta.get_field(field) for field in fields]  # noqa: SLF001  # `_meta` is private\n    if exclude is not None:\n        return [field for field in field_list_full if field.name not in exclude]\n\n    return field_list_full\n</code></pre>"},{"location":"utils/model_helpers/#django_rubble.utils.model_helpers.get_model_label","title":"<code>get_model_label(model)</code>","text":"<p>Get model's label as defined in Meta class.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Model</code> <p>the model to get label from</p> required <p>Returns:</p> Type Description <code>str</code> <p>model's label</p> Source code in <code>django_rubble\\utils\\model_helpers.py</code> <pre><code>def get_model_label(model: Model) -&gt; str:\n    \"\"\"Get model's label as defined in Meta class.\n\n    Args:\n        model: the model to get label from\n\n    Returns:\n        model's label\"\"\"\n    return model._meta.label  # noqa: SLF001\n</code></pre>"},{"location":"utils/model_helpers/#django_rubble.utils.model_helpers.get_model_name","title":"<code>get_model_name(model)</code>","text":"<p>Get model's name as defined in Meta class.</p> <p>Will return as all lower case</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>type[Model]</code> <p>the model to get name from</p> required <p>Returns:</p> Type Description <code>str</code> <p>model's name</p> Source code in <code>django_rubble\\utils\\model_helpers.py</code> <pre><code>def get_model_name(model: type[Model]) -&gt; str:\n    \"\"\"Get model's name as defined in Meta class.\n\n    Will return as all lower case\n\n    Args:\n        model: the model to get name from\n\n    Returns:\n        model's name\n    \"\"\"\n    return model._meta.model_name  # noqa: SLF001\n</code></pre>"},{"location":"utils/model_helpers/#django_rubble.utils.model_helpers.get_model_verbose_name_plural","title":"<code>get_model_verbose_name_plural(model)</code>","text":"<p>Get model's verbose name as defined in Meta class.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>type[Model]</code> <p>the model to get verbose name from</p> required <p>Returns:</p> Type Description <code>str</code> <p>model's verbose name</p> Source code in <code>django_rubble\\utils\\model_helpers.py</code> <pre><code>def get_model_verbose_name_plural(model: type[Model]) -&gt; str:\n    \"\"\"Get model's verbose name as defined in Meta class.\n\n    Args:\n        model: the model to get verbose name from\n\n    Returns:\n        model's verbose name\n    \"\"\"\n    return model._meta.verbose_name_plural  # noqa: SLF001\n</code></pre>"},{"location":"utils/numbers/","title":"Numbers","text":""},{"location":"utils/numbers/#django_rubble.utils.numbers","title":"<code>django_rubble.utils.numbers</code>","text":""},{"location":"utils/numbers/#django_rubble.utils.numbers.Percent","title":"<code>Percent</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A model for handling percentages.</p> <p>This model is designed to handle percentages in a way that is more accurate than using floats.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Decimal | float | str</code> required <code>per_hundred</code> <code>Decimal | float | str | None</code> <code>None</code> <code>decimal_places</code> <code>int | None</code> <code>None</code> <code>has_decimal_places</code> <code>bool | None</code> <code>None</code> <p>Attributes:</p> Name Type Description <code>value</code> <code>(Decimal, float, str)</code> <p>The value of the percentage.</p> <code>per_hundred</code> <code>(Decimal, float, str)</code> <p>The value of the percentage out of 100.</p> <code>decimal_places</code> <code>int</code> <p>The number of decimal places to use.</p> <code>has_decimal_places</code> <code>bool</code> <p>Whether the value has decimal places.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>class Percent(BaseModel):\n    \"\"\"A model for handling percentages.\n\n    This model is designed to handle percentages in a way that is more accurate than\n    using floats.\n\n    Attributes:\n        value (Decimal, float, str): The value of the percentage.\n        per_hundred (Decimal, float, str): The value of the percentage out of 100.\n        decimal_places (int): The number of decimal places to use.\n        has_decimal_places (bool): Whether the value has decimal places.\n    \"\"\"\n\n    value: Decimal | float | str\n    per_hundred: Decimal | float | str | None = None\n    decimal_places: int | None = None\n    has_decimal_places: bool | None = None\n\n    def model_post_init(self, __context: Any) -&gt; None:\n        new_value = trim_trailing_zeros(self.value)\n        per_hundred_dec = trim_trailing_zeros(ratio_to_whole(self.value))\n\n        if self.decimal_places is not None:\n            new_value = round(new_value, self.decimal_places + 2)\n            per_hundred_dec = round(per_hundred_dec, self.decimal_places)\n            self.has_decimal_places = True\n        else:\n            self.has_decimal_places = False\n\n        self.value = set_zero(new_value)\n        self.per_hundred = set_zero(per_hundred_dec)\n\n        super().model_post_init(__context)\n\n    @classmethod\n    def fromform(\n        cls, val: Decimal, field_decimal_places: int | None = None\n    ) -&gt; \"Percent\":\n        \"\"\"Create Percent from human-entry (out of 100)\n\n        Examples:\n            &gt;&gt;&gt; Percent.fromform(Decimal(3))\n            Percent(value=Decimal('0.03'), per_hundred=3)\n            &gt;&gt;&gt; Percent.fromform(Decimal(\"100\"))\n            Percent(value=Decimal('1'), per_hundred=100)\n\n        Args:\n            val (Decimal): The value of the percentage.\n            field_decimal_places (int): The number of decimal places to use.\n\n        Returns:\n            Percent: The percentage model.\n        \"\"\"\n        ratio_decimal = whole_to_ratio(val)\n        return cls(value=ratio_decimal, decimal_places=field_decimal_places)\n\n    def __mul__(self, other):\n        \"\"\"Multiply using the ratio (out of 1) instead of human-readable out of 100\n\n        Examples:\n            &gt;&gt;&gt; Percent(0.03) * 100\n            Decimal('3')\n            &gt;&gt;&gt; Percent(1) * 100\n            Decimal('100')\"\"\"\n        return self.value.__mul__(other)\n\n    def __float__(self):\n        return float(self.value)\n\n    def as_tuple(self) -&gt; DecimalTuple:\n        \"\"\"Return the value as a decimal tuple.\n\n        Returns:\n            DecimalTuple: The value as a decimal tuple.\"\"\"\n        if not isinstance(self.value, Decimal):\n            return Decimal(str(self.value)).as_tuple()\n        return self.value.as_tuple()\n\n    def is_finite(self):\n        return self.value.is_finite()\n\n    def __repr__(self) -&gt; str:\n        return f\"Percentage('{self.value}', '{self.per_hundred}%')\"\n\n    def __str__(self):\n        return f\"{self.per_hundred}%\"\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.Percent.__mul__","title":"<code>__mul__(other)</code>","text":"<p>Multiply using the ratio (out of 1) instead of human-readable out of 100</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Percent(0.03) * 100\nDecimal('3')\n&gt;&gt;&gt; Percent(1) * 100\nDecimal('100')\n</code></pre> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def __mul__(self, other):\n    \"\"\"Multiply using the ratio (out of 1) instead of human-readable out of 100\n\n    Examples:\n        &gt;&gt;&gt; Percent(0.03) * 100\n        Decimal('3')\n        &gt;&gt;&gt; Percent(1) * 100\n        Decimal('100')\"\"\"\n    return self.value.__mul__(other)\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.Percent.as_tuple","title":"<code>as_tuple()</code>","text":"<p>Return the value as a decimal tuple.</p> <p>Returns:</p> Name Type Description <code>DecimalTuple</code> <code>DecimalTuple</code> <p>The value as a decimal tuple.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def as_tuple(self) -&gt; DecimalTuple:\n    \"\"\"Return the value as a decimal tuple.\n\n    Returns:\n        DecimalTuple: The value as a decimal tuple.\"\"\"\n    if not isinstance(self.value, Decimal):\n        return Decimal(str(self.value)).as_tuple()\n    return self.value.as_tuple()\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.Percent.fromform","title":"<code>fromform(val, field_decimal_places=None)</code>  <code>classmethod</code>","text":"<p>Create Percent from human-entry (out of 100)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Percent.fromform(Decimal(3))\nPercent(value=Decimal('0.03'), per_hundred=3)\n&gt;&gt;&gt; Percent.fromform(Decimal(\"100\"))\nPercent(value=Decimal('1'), per_hundred=100)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>Decimal</code> <p>The value of the percentage.</p> required <code>field_decimal_places</code> <code>int</code> <p>The number of decimal places to use.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Percent</code> <code>Percent</code> <p>The percentage model.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>@classmethod\ndef fromform(\n    cls, val: Decimal, field_decimal_places: int | None = None\n) -&gt; \"Percent\":\n    \"\"\"Create Percent from human-entry (out of 100)\n\n    Examples:\n        &gt;&gt;&gt; Percent.fromform(Decimal(3))\n        Percent(value=Decimal('0.03'), per_hundred=3)\n        &gt;&gt;&gt; Percent.fromform(Decimal(\"100\"))\n        Percent(value=Decimal('1'), per_hundred=100)\n\n    Args:\n        val (Decimal): The value of the percentage.\n        field_decimal_places (int): The number of decimal places to use.\n\n    Returns:\n        Percent: The percentage model.\n    \"\"\"\n    ratio_decimal = whole_to_ratio(val)\n    return cls(value=ratio_decimal, decimal_places=field_decimal_places)\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.any_to_float","title":"<code>any_to_float(s, default=0)</code>","text":"<p>Cast value as float, return default if invalid type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; any_to_float(\"5.5\", 2.3)\n5.5\n&gt;&gt;&gt; any_to_float(\"test\", 0)\n0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>Any</code> <p>The value to cast.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The value as a float, or the default if the value is not a number.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def any_to_float(s: Any, default: float = 0) -&gt; float:\n    \"\"\"Cast value as float, return default if invalid type.\n\n    Examples:\n        &gt;&gt;&gt; any_to_float(\"5.5\", 2.3)\n        5.5\n        &gt;&gt;&gt; any_to_float(\"test\", 0)\n        0\n\n    Args:\n        s (Any): The value to cast.\n\n    Returns:\n        float: The value as a float, or the default if the value is not a number.\"\"\"\n    if not is_number(default):\n        msg = f\"Default must be of type `float` [{default}]\"\n        raise TypeError(msg)\n    try:\n        value_float = float(s)\n    except ValueError:\n        value_float = default\n\n    return value_float\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.is_number","title":"<code>is_number(s)</code>","text":"<p>Check if a value can be coerced into a number type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_number(10)\nTrue\n&gt;&gt;&gt; is_number(\"hello\")\nFalse\n&gt;&gt;&gt; is_number(Decimal(\"3.14\"))\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>Any</code> <p>The value to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the value can be coerced into a number type, False otherwise.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def is_number(s: Any) -&gt; bool:\n    \"\"\"Check if a value can be coerced into a number type.\n\n    Examples:\n        &gt;&gt;&gt; is_number(10)\n        True\n        &gt;&gt;&gt; is_number(\"hello\")\n        False\n        &gt;&gt;&gt; is_number(Decimal(\"3.14\"))\n        True\n\n    Args:\n        s (Any): The value to check.\n\n    Returns:\n        bool: True if the value can be coerced into a number type, False otherwise.\"\"\"\n    if s is None:\n        return False\n    try:\n        float(s)\n    except ValueError:\n        return False\n    else:\n        return True\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.ratio_to_whole","title":"<code>ratio_to_whole(ratio)</code>","text":"<p>Convert a ratio to a whole number.</p> <p>This is useful for converting a ratio to a percentage.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ratio_to_whole(0.03)\n3\n&gt;&gt;&gt; ratio_to_whole(Decimal(\"1\"))\n100\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>ratio</code> <code>(Decimal, float, str)</code> <p>The ratio to be converted.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The whole number.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def ratio_to_whole(ratio: T) -&gt; T:\n    \"\"\"Convert a ratio to a whole number.\n\n    This is useful for converting a ratio to a percentage.\n\n    Examples:\n        &gt;&gt;&gt; ratio_to_whole(0.03)\n        3\n        &gt;&gt;&gt; ratio_to_whole(Decimal(\"1\"))\n        100\n\n    Args:\n        ratio (Decimal, float, str): The ratio to be converted.\n\n    Returns:\n        The whole number.\n    \"\"\"\n    multiplier = Decimal(\"100\") if isinstance(ratio, Decimal) else 100\n\n    return ratio * multiplier\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.set_zero","title":"<code>set_zero(value)</code>","text":"<p>Set a value to a true Decimal zero if it is zero.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; set_zero(0)\nDecimal('0')\n&gt;&gt;&gt; set_zero(0.0)\nDecimal('0')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>(int, float, str)</code> <p>The value to be checked.</p> required <p>Returns:</p> Type Description <code>Decimal</code> <p>The value as a Decimal if it is zero, otherwise the original value.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def set_zero(value: T) -&gt; Decimal:\n    \"\"\"Set a value to a true Decimal zero if it is zero.\n\n    Examples:\n        &gt;&gt;&gt; set_zero(0)\n        Decimal('0')\n        &gt;&gt;&gt; set_zero(0.0)\n        Decimal('0')\n\n    Args:\n        value (int, float, str): The value to be checked.\n\n    Returns:\n        The value as a Decimal if it is zero, otherwise the original value.\"\"\"\n    decimal_from_string = Decimal(str(value))\n\n    if decimal_from_string == Decimal(0):\n        return Decimal()\n\n    return decimal_from_string\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.trim_trailing_zeros","title":"<code>trim_trailing_zeros(value)</code>","text":"<p>Remove trailing zeros from a decimal value.</p> <p>This is useful for ensuring that a value can be safely compared with another value.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trim_trailing_zeros(3.1400)\nDecimal('3.14')\n&gt;&gt;&gt; trim_trailing_zeros(Decimal(\"3.1400\"))\nDecimal('3.14')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>(float, Decimal, str)</code> <p>The value to be trimmed.</p> required <p>Returns:</p> Type Description <code>Decimal</code> <p>The trimmed value. Decimal</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def trim_trailing_zeros(value: T) -&gt; Decimal:\n    \"\"\"Remove trailing zeros from a decimal value.\n\n    This is useful for ensuring that a value can be safely compared with another value.\n\n    Examples:\n        &gt;&gt;&gt; trim_trailing_zeros(3.1400)\n        Decimal('3.14')\n        &gt;&gt;&gt; trim_trailing_zeros(Decimal(\"3.1400\"))\n        Decimal('3.14')\n\n    Args:\n        value (float, Decimal, str): The value to be trimmed.\n\n    Returns:\n        The trimmed value. Decimal\n    \"\"\"\n    return Decimal(str(value)).normalize()\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.whole_to_ratio","title":"<code>whole_to_ratio(whole)</code>","text":"<p>Convert a whole number to a ratio.</p> <p>This is useful for converting a percentage to a ratio.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; whole_to_ratio(3)\n0.03\n&gt;&gt;&gt; whole_to_ratio(100)\n1\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>(Decimal, float, str)</code> <p>The whole number to be converted.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The ratio. Decimal</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def whole_to_ratio(whole: T) -&gt; T:\n    \"\"\"Convert a whole number to a ratio.\n\n    This is useful for converting a percentage to a ratio.\n\n    Examples:\n        &gt;&gt;&gt; whole_to_ratio(3)\n        0.03\n        &gt;&gt;&gt; whole_to_ratio(100)\n        1\n\n    Args:\n        whole (Decimal, float, str): The whole number to be converted.\n\n    Returns:\n        The ratio. Decimal\n    \"\"\"\n    multiplier = Decimal(\"100\") if isinstance(whole, Decimal) else 100\n    return whole / multiplier\n</code></pre>"},{"location":"utils/strings/","title":"Strings","text":""},{"location":"utils/strings/#django_rubble.utils.strings","title":"<code>django_rubble.utils.strings</code>","text":""},{"location":"utils/strings/#django_rubble.utils.strings.sort_title","title":"<code>sort_title(title)</code>","text":"<p>Sort a title by the first word, ignoring articles.</p> <p>Articles include \"a\", \"an\", and \"the\".</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sort_title(\"The Cat in the Hat\")\n'Cat in the Hat, The'\n&gt;&gt;&gt; sort_title(\"A Tale of Two Cities\")\n'Tale of Two Cities, A'\n&gt;&gt;&gt; sort_title(\"My Fair Lady\")\n'My Fair Lady'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title to be sorted.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The sorted title.</p> Source code in <code>django_rubble\\utils\\strings.py</code> <pre><code>def sort_title(title: str) -&gt; str:\n    \"\"\"Sort a title by the first word, ignoring articles.\n\n    Articles include \"a\", \"an\", and \"the\".\n\n    Examples:\n        &gt;&gt;&gt; sort_title(\"The Cat in the Hat\")\n        'Cat in the Hat, The'\n        &gt;&gt;&gt; sort_title(\"A Tale of Two Cities\")\n        'Tale of Two Cities, A'\n        &gt;&gt;&gt; sort_title(\"My Fair Lady\")\n        'My Fair Lady'\n\n    Args:\n        title: The title to be sorted.\n\n    Returns:\n        The sorted title.\n    \"\"\"\n    articles = {\"a\", \"an\", \"the\"}\n\n    title = title.lower()\n\n    first, _, rest = title.partition(\" \")\n    return f\"{rest}, {first}\" if first in articles else title\n</code></pre>"},{"location":"utils/strings/#django_rubble.utils.strings.truncate_secret","title":"<code>truncate_secret(secret, *, max_length, mask='*', mask_short=False)</code>","text":"<p>Truncate a secret to a maximum length and mask truncated characters.</p> <p>The secret is truncated to the specified length by removing characters from the middle of the path.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; truncate_secret(\"i72BPzV54LH7lwaez5F5BF9gRuvX5Phy\", max_length=20, mask=\".\")\n'i72BPzV...9gRuvX5Phy'\n&gt;&gt;&gt; truncate_secret(\"C:/Users/username/Documents/file.txt\", max_length=30)\n'i72BPzV54LH7***5F5BF9gRuvX5Phy'\n&gt;&gt;&gt; truncate_secret(\n    \"i72BPzV54LH7lwaez5F5BF9gRuvX5Phy\",\n    max_length=40,\n    mask_short=True\n)\n'****************************************'\n&gt;&gt;&gt; truncate_secret(\n    \"i72B\",\n    max_length=8,\n    mask_short=True\n)\n'********'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret to be truncated.</p> required <code>max_length</code> <code>int</code> <p>The maximum length of the truncated string.</p> required <code>mask</code> <code>str</code> <p>The character to use for masking the truncated characters.</p> <code>'*'</code> <code>mask_short</code> <code>bool</code> <p>Whether to mask the secret if it is already shorter than the maximum length.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The truncated string.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the secret is already shorter than the maximum length and mask_short is False.</p> Source code in <code>django_rubble\\utils\\strings.py</code> <pre><code>def truncate_secret(\n    secret: str, *, max_length: int, mask: str = \"*\", mask_short: bool = False\n) -&gt; str:\n    \"\"\"Truncate a secret to a maximum length and mask truncated characters.\n\n    The secret is truncated to the specified length by removing characters from the\n    middle of the path.\n\n    Examples:\n        &gt;&gt;&gt; truncate_secret(\"i72BPzV54LH7lwaez5F5BF9gRuvX5Phy\", max_length=20, mask=\".\")\n        'i72BPzV...9gRuvX5Phy'\n        &gt;&gt;&gt; truncate_secret(\"C:/Users/username/Documents/file.txt\", max_length=30)\n        'i72BPzV54LH7***5F5BF9gRuvX5Phy'\n        &gt;&gt;&gt; truncate_secret(\n            \"i72BPzV54LH7lwaez5F5BF9gRuvX5Phy\",\n            max_length=40,\n            mask_short=True\n        )\n        '****************************************'\n        &gt;&gt;&gt; truncate_secret(\n            \"i72B\",\n            max_length=8,\n            mask_short=True\n        )\n        '********'\n\n    Args:\n        secret (str): The secret to be truncated.\n        max_length (int): The maximum length of the truncated string.\n        mask (str): The character to use for masking the truncated characters.\n        mask_short (bool): Whether to mask the secret if it is already shorter than the\n            maximum length.\n\n    Returns:\n        str: The truncated string.\n\n    Raises:\n        ValueError: If the secret is already shorter than the maximum length and\n            mask_short is False.\n    \"\"\"\n\n    if len(secret) &lt;= max_length and not mask_short:\n        msg = f\"Secret is already shorter than max_length [{max_length}]\"\n        raise ValueError(msg)\n    if len(secret) &lt;= max_length:\n        return mask * max_length\n\n    tail_length = max_length // 2\n    head_length = max_length - tail_length - 3\n\n    head = secret[:head_length]\n    tail = secret[-tail_length:]\n\n    new_string = f\"{head}{3 * mask}{tail}\"\n\n    assert len(new_string) &lt;= max_length\n\n    return new_string\n</code></pre>"}]}