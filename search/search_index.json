{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"checks/errors/","title":"Errors","text":""},{"location":"checks/errors/#models","title":"Models","text":"<ul> <li>django_rubble.M001: Name not found on model</li> <li>django_rubble.M002: Missing or invalid field on model</li> </ul>"},{"location":"checks/messages/","title":"Messages","text":""},{"location":"checks/messages/#django_rubble.checks.messages","title":"<code>django_rubble.checks.messages</code>","text":"<p>Message functions for the checks module.</p> <p>This module provides functions that return error messages for the checks module.</p> <p>Available functions:</p> <ul> <li>must_be: Return a list of errors for a missing or incorrect option value.</li> <li>refer_to_missing_field: Return a list of errors for a missing field.</li> </ul>"},{"location":"checks/messages/#django_rubble.checks.messages.must_be","title":"<code>must_be(type_description, option, obj, error_id)</code>","text":"<p>Return a list of errors for a missing or incorrect option value.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; must_be(\"a list\", \"natural_key_fields\", cls, \"rubble.E002\")\n[Error: The value of 'natural_key_fields' must be a list.]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>type_description</code> <code>str</code> <p>The description of the required type.</p> required <code>option</code> <code>str</code> <p>The name of the option.</p> required <code>obj</code> <code>object</code> <p>The object to which the option belongs.</p> required <code>error_id</code> <code>str</code> <p>The error ID.</p> required <p>Returns:</p> Type Description <code>list[Error]</code> <p>list[Error]: A list of errors</p> Source code in <code>django_rubble\\checks\\messages.py</code> <pre><code>def must_be(\n    type_description: str, option: str, obj: object, error_id: str\n) -&gt; list[checks.Error]:\n    \"\"\"Return a list of errors for a missing or incorrect option value.\n\n    Examples:\n        &gt;&gt;&gt; must_be(\"a list\", \"natural_key_fields\", cls, \"rubble.E002\")\n        [Error: The value of 'natural_key_fields' must be a list.]\n\n    Args:\n        type_description (str): The description of the required type.\n        option (str): The name of the option.\n        obj (object): The object to which the option belongs.\n        error_id (str): The error ID.\n\n    Returns:\n        list[Error]: A list of errors\n    \"\"\"\n    return [\n        checks.Error(\n            f\"The value of '{option}' must be {type_description}.\",\n            obj=obj.__class__,\n            id=error_id,\n        ),\n    ]\n</code></pre>"},{"location":"checks/messages/#django_rubble.checks.messages.refer_to_missing_field","title":"<code>refer_to_missing_field(field_name, option, obj, error_id)</code>","text":"<p>Return a list of errors for a missing field.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; refer_to_missing_field(\"foo\", \"bar\", MyModel, \"rubble.E003\")\n[Error: The value of 'bar' refers to 'foo', which is not a field of 'MyModel'.]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>field_name</code> <code>str</code> <p>The name of the missing field.</p> required <code>option</code> <code>str</code> <p>The name of the option.</p> required <code>obj</code> <code>type[Model]</code> <p>The model to which the option belongs.</p> required <code>error_id</code> <code>str</code> <p>The error ID.</p> required <p>Returns:</p> Type Description <code>list[Error]</code> <p>list[Error]: A list of errors</p> Source code in <code>django_rubble\\checks\\messages.py</code> <pre><code>def refer_to_missing_field(\n    field_name: str, option: str, obj: type[models.Model], error_id: str\n) -&gt; list[checks.Error]:\n    \"\"\"Return a list of errors for a missing field.\n\n    Examples:\n        &gt;&gt;&gt; refer_to_missing_field(\"foo\", \"bar\", MyModel, \"rubble.E003\")\n        [Error: The value of 'bar' refers to 'foo', which is not a field of 'MyModel'.]\n\n    Args:\n        field_name (str): The name of the missing field.\n        option (str): The name of the option.\n        obj (type[models.Model]): The model to which the option belongs.\n        error_id (str): The error ID.\n\n    Returns:\n        list[Error]: A list of errors\n    \"\"\"\n    return [\n        checks.Error(\n            f\"The value of '{option}' refers to '{field_name}',\"\n            f\" which is not a field of '{get_model_label(obj)}'.\",\n            obj=obj,\n            id=error_id,\n        ),\n    ]\n</code></pre>"},{"location":"models/number_models/","title":"Number models","text":""},{"location":"models/number_models/#django_rubble.models.number_models.NumberedModel","title":"<code>django_rubble.models.number_models.NumberedModel</code>","text":"<p>               Bases: <code>Model</code></p> <p>Adds a <code>number</code> field that uses <code>DocumentNumber</code> to generate values.</p> <p>Adds a <code>natural_key</code> method to the model, but no manager that uses it.</p> <p>Attributes:</p> Name Type Description <code>number_config</code> <code>SerialNumberConfig</code> <p>A SerialNumberConfig instance.</p> Source code in <code>django_rubble\\models\\number_models.py</code> <pre><code>class NumberedModel(models.Model):\n    \"\"\"Adds a `number` field that uses `DocumentNumber` to generate values.\n\n    Adds a `natural_key` method to the model, but no manager that uses it.\n\n    Attributes:\n        number_config: A SerialNumberConfig instance.\n    \"\"\"\n\n    number = models.CharField(_(\"number\"), unique=True, max_length=10, editable=False)\n    number_config: SerialNumberConfig\n\n    class Meta:\n        abstract = True\n\n    def save(self, *args, **kwargs) -&gt; None:\n        if self._state.adding:\n            self.number, _ = NamedSerialNumber.objects.get_serial_number(self)\n            msg = f\"New number is: {self.number}\"\n            logger.debug(msg)\n        return super().save(*args, **kwargs)\n\n    def natural_key(self):\n        return (self.number,)\n</code></pre>"},{"location":"models/number_models/#django_rubble.models.number_models.SerialNumberConfig","title":"<code>django_rubble.models.number_models.SerialNumberConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for NumberModel numbering.</p> Example <p><code>SerialNumberConfig(prefix=\"INV\", width=4, initial_value=1, step=1)</code> -&gt; <code>INV0001</code>, <code>INV0002</code>, etc.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str | None</code> <p>The name of the model, used for NamedSerialNumber.</p> <code>initial_value</code> <code>int</code> <p>The starting value for the serial number.</p> <code>step</code> <code>int</code> <p>The increment value for the serial number.</p> <code>prefix</code> <code>str</code> <p>The prefix for the serial number.</p> Source code in <code>django_rubble\\models\\number_models.py</code> <pre><code>class SerialNumberConfig(BaseModel):\n    \"\"\"Configuration for NumberModel numbering.\n\n    Example:\n        `SerialNumberConfig(prefix=\"INV\", width=4, initial_value=1, step=1)` -&gt;\n        `INV0001`, `INV0002`, etc.\n\n    Attributes:\n        name: The name of the model, used for NamedSerialNumber.\n        initial_value: The starting value for the serial number.\n        step: The increment value for the serial number.\n        prefix: The prefix for the serial number.\"\"\"\n\n    name: str | None = None\n    initial_value: int = 1\n    step: int = 1\n    prefix: str\n    width: int\n</code></pre>"},{"location":"utils/default_funcs/","title":"Default funcs","text":""},{"location":"utils/default_funcs/#django_rubble.utils.default_funcs","title":"<code>django_rubble.utils.default_funcs</code>","text":"<p>Useful functions for default values in Django models.</p>"},{"location":"utils/default_funcs/#django_rubble.utils.default_funcs.django_now","title":"<code>django_now()</code>","text":"<p>Return the current datetime in the timezone of the Django settings.</p> Source code in <code>django_rubble\\utils\\default_funcs.py</code> <pre><code>def django_now() -&gt; datetime:\n    \"\"\"Return the current datetime in the timezone of the Django settings.\"\"\"\n    return timezone.now()\n</code></pre>"},{"location":"utils/default_funcs/#django_rubble.utils.default_funcs.django_today","title":"<code>django_today()</code>","text":"<p>Return the current date in the timezone of the Django settings.</p> Source code in <code>django_rubble\\utils\\default_funcs.py</code> <pre><code>def django_today() -&gt; date:\n    \"\"\"Return the current date in the timezone of the Django settings.\"\"\"\n    return timezone.now().date()\n</code></pre>"},{"location":"utils/model_helpers/","title":"Model helpers","text":""},{"location":"utils/model_helpers/#django_rubble.utils.model_helpers","title":"<code>django_rubble.utils.model_helpers</code>","text":""},{"location":"utils/model_helpers/#django_rubble.utils.model_helpers.get_model_fields","title":"<code>get_model_fields(model, *, fields=None, exclude=None)</code>","text":"<p>Returns list of fields from model.</p> <p>Cannot include both fields and exclude.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>type[Model]</code> <p>the model to get fields from</p> required <code>fields</code> <code>list[str] | None</code> <p>list of fields to include, default is None</p> <code>None</code> <code>exclude</code> <code>list[str] | None</code> <p>list of fields to exclude, default is None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Field]</code> <p>list of fields</p> Source code in <code>django_rubble\\utils\\model_helpers.py</code> <pre><code>def get_model_fields(\n    model: type[Model],\n    *,\n    fields: list[str] | None = None,\n    exclude: list[str] | None = None,\n) -&gt; list[Field]:\n    \"\"\"Returns list of fields from model.\n\n    Cannot include both fields and exclude.\n\n    Args:\n      model: the model to get fields from\n      fields: list of fields to include, default is None\n      exclude: list of fields to exclude, default is None\n\n    Returns:\n      list of fields\n    \"\"\"\n    if fields is not None and exclude is not None:\n        msg = \"Cannot specify both 'fields' and 'exclude'.\"\n        raise ValueError(msg)\n\n    field_list_full = cast(list[Field], list(model._meta.fields))  # noqa: SLF001  # `_meta` is private\n\n    if fields is not None:\n        return [model._meta.get_field(field) for field in fields]  # noqa: SLF001  # `_meta` is private\n    if exclude is not None:\n        return [field for field in field_list_full if field.name not in exclude]\n\n    return field_list_full\n</code></pre>"},{"location":"utils/model_helpers/#django_rubble.utils.model_helpers.get_model_label","title":"<code>get_model_label(model)</code>","text":"<p>Get model's label as defined in Meta class.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Model</code> <p>the model to get label from</p> required <p>Returns:</p> Type Description <code>str</code> <p>model's label</p> Source code in <code>django_rubble\\utils\\model_helpers.py</code> <pre><code>def get_model_label(model: Model) -&gt; str:\n    \"\"\"Get model's label as defined in Meta class.\n\n    Args:\n        model: the model to get label from\n\n    Returns:\n        model's label\"\"\"\n    return model._meta.label  # noqa: SLF001\n</code></pre>"},{"location":"utils/model_helpers/#django_rubble.utils.model_helpers.get_model_name","title":"<code>get_model_name(model)</code>","text":"<p>Get model's name as defined in Meta class.</p> <p>Will return as all lower case</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>type[Model]</code> <p>the model to get name from</p> required <p>Returns:</p> Type Description <code>str</code> <p>model's name</p> Source code in <code>django_rubble\\utils\\model_helpers.py</code> <pre><code>def get_model_name(model: type[Model]) -&gt; str:\n    \"\"\"Get model's name as defined in Meta class.\n\n    Will return as all lower case\n\n    Args:\n        model: the model to get name from\n\n    Returns:\n        model's name\n    \"\"\"\n    return model._meta.model_name  # noqa: SLF001\n</code></pre>"},{"location":"utils/model_helpers/#django_rubble.utils.model_helpers.get_model_verbose_name_plural","title":"<code>get_model_verbose_name_plural(model)</code>","text":"<p>Get model's verbose name as defined in Meta class.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>type[Model]</code> <p>the model to get verbose name from</p> required <p>Returns:</p> Type Description <code>str</code> <p>model's verbose name</p> Source code in <code>django_rubble\\utils\\model_helpers.py</code> <pre><code>def get_model_verbose_name_plural(model: type[Model]) -&gt; str:\n    \"\"\"Get model's verbose name as defined in Meta class.\n\n    Args:\n        model: the model to get verbose name from\n\n    Returns:\n        model's verbose name\n    \"\"\"\n    return model._meta.verbose_name_plural  # noqa: SLF001\n</code></pre>"},{"location":"utils/numbers/","title":"Numbers","text":""},{"location":"utils/numbers/#django_rubble.utils.numbers","title":"<code>django_rubble.utils.numbers</code>","text":""},{"location":"utils/numbers/#django_rubble.utils.numbers.Percent","title":"<code>Percent</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A model for handling percentages.</p> <p>This model is designed to handle percentages in a way that is more accurate than using floats.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>(Decimal, float, str)</code> <p>The value of the percentage.</p> <code>per_hundred</code> <code>(Decimal, float, str)</code> <p>The value of the percentage out of 100.</p> <code>decimal_places</code> <code>int</code> <p>The number of decimal places to use.</p> <code>has_decimal_places</code> <code>bool</code> <p>Whether the value has decimal places.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>class Percent(BaseModel):\n    \"\"\"A model for handling percentages.\n\n    This model is designed to handle percentages in a way that is more accurate than\n    using floats.\n\n    Attributes:\n        value (Decimal, float, str): The value of the percentage.\n        per_hundred (Decimal, float, str): The value of the percentage out of 100.\n        decimal_places (int): The number of decimal places to use.\n        has_decimal_places (bool): Whether the value has decimal places.\n    \"\"\"\n\n    value: Decimal | float | str\n    per_hundred: Decimal | float | str | None = None\n    decimal_places: int | None = None\n    has_decimal_places: bool | None = None\n\n    def model_post_init(self, __context: Any) -&gt; None:\n        new_value = trim_trailing_zeros(self.value)\n        per_hundred_dec = trim_trailing_zeros(ratio_to_whole(self.value))\n\n        if self.decimal_places is not None:\n            new_value = round(new_value, self.decimal_places + 2)\n            per_hundred_dec = round(per_hundred_dec, self.decimal_places)\n            self.has_decimal_places = True\n        else:\n            self.has_decimal_places = False\n\n        self.value = set_zero(new_value)\n        self.per_hundred = set_zero(per_hundred_dec)\n\n        super().model_post_init(__context)\n\n    @classmethod\n    def fromform(\n        cls, val: Decimal, field_decimal_places: int | None = None\n    ) -&gt; \"Percent\":\n        \"\"\"Create Percent from human-entry (out of 100)\n\n        Examples:\n            &gt;&gt;&gt; Percent.fromform(Decimal(3))\n            Percent(value=Decimal('0.03'), per_hundred=3)\n            &gt;&gt;&gt; Percent.fromform(Decimal(\"100\"))\n            Percent(value=Decimal('1'), per_hundred=100)\n\n        Args:\n            val (Decimal): The value of the percentage.\n            field_decimal_places (int): The number of decimal places to use.\n\n        Returns:\n            Percent: The percentage model.\n        \"\"\"\n        ratio_decimal = whole_to_ratio(val)\n        return cls(value=ratio_decimal, decimal_places=field_decimal_places)\n\n    def __mul__(self, other):\n        \"\"\"Multiply using the ratio (out of 1) instead of human-readable out of 100\n\n        Examples:\n            &gt;&gt;&gt; Percent(0.03) * 100\n            Decimal('3')\n            &gt;&gt;&gt; Percent(1) * 100\n            Decimal('100')\"\"\"\n        return self.value.__mul__(other)\n\n    def __float__(self):\n        return float(self.value)\n\n    def as_tuple(self) -&gt; DecimalTuple:\n        \"\"\"Return the value as a decimal tuple.\n\n        Returns:\n            DecimalTuple: The value as a decimal tuple.\"\"\"\n        if not isinstance(self.value, Decimal):\n            return Decimal(str(self.value)).as_tuple()\n        return self.value.as_tuple()\n\n    def is_finite(self):\n        return self.value.is_finite()\n\n    def __repr__(self) -&gt; str:\n        return f\"Percentage('{self.value}', '{self.per_hundred}%')\"\n\n    def __str__(self):\n        return f\"{self.per_hundred}%\"\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.Percent.__mul__","title":"<code>__mul__(other)</code>","text":"<p>Multiply using the ratio (out of 1) instead of human-readable out of 100</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Percent(0.03) * 100\nDecimal('3')\n&gt;&gt;&gt; Percent(1) * 100\nDecimal('100')\n</code></pre> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def __mul__(self, other):\n    \"\"\"Multiply using the ratio (out of 1) instead of human-readable out of 100\n\n    Examples:\n        &gt;&gt;&gt; Percent(0.03) * 100\n        Decimal('3')\n        &gt;&gt;&gt; Percent(1) * 100\n        Decimal('100')\"\"\"\n    return self.value.__mul__(other)\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.Percent.as_tuple","title":"<code>as_tuple()</code>","text":"<p>Return the value as a decimal tuple.</p> <p>Returns:</p> Name Type Description <code>DecimalTuple</code> <code>DecimalTuple</code> <p>The value as a decimal tuple.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def as_tuple(self) -&gt; DecimalTuple:\n    \"\"\"Return the value as a decimal tuple.\n\n    Returns:\n        DecimalTuple: The value as a decimal tuple.\"\"\"\n    if not isinstance(self.value, Decimal):\n        return Decimal(str(self.value)).as_tuple()\n    return self.value.as_tuple()\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.Percent.fromform","title":"<code>fromform(val, field_decimal_places=None)</code>  <code>classmethod</code>","text":"<p>Create Percent from human-entry (out of 100)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Percent.fromform(Decimal(3))\nPercent(value=Decimal('0.03'), per_hundred=3)\n&gt;&gt;&gt; Percent.fromform(Decimal(\"100\"))\nPercent(value=Decimal('1'), per_hundred=100)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>Decimal</code> <p>The value of the percentage.</p> required <code>field_decimal_places</code> <code>int</code> <p>The number of decimal places to use.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Percent</code> <code>Percent</code> <p>The percentage model.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>@classmethod\ndef fromform(\n    cls, val: Decimal, field_decimal_places: int | None = None\n) -&gt; \"Percent\":\n    \"\"\"Create Percent from human-entry (out of 100)\n\n    Examples:\n        &gt;&gt;&gt; Percent.fromform(Decimal(3))\n        Percent(value=Decimal('0.03'), per_hundred=3)\n        &gt;&gt;&gt; Percent.fromform(Decimal(\"100\"))\n        Percent(value=Decimal('1'), per_hundred=100)\n\n    Args:\n        val (Decimal): The value of the percentage.\n        field_decimal_places (int): The number of decimal places to use.\n\n    Returns:\n        Percent: The percentage model.\n    \"\"\"\n    ratio_decimal = whole_to_ratio(val)\n    return cls(value=ratio_decimal, decimal_places=field_decimal_places)\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.any_to_float","title":"<code>any_to_float(s, default=0)</code>","text":"<p>Cast value as float, return default if invalid type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; any_to_float(\"5.5\", 2.3)\n5.5\n&gt;&gt;&gt; any_to_float(\"test\", 0)\n0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>Any</code> <p>The value to cast.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The value as a float, or the default if the value is not a number.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def any_to_float(s: Any, default: float = 0) -&gt; float:\n    \"\"\"Cast value as float, return default if invalid type.\n\n    Examples:\n        &gt;&gt;&gt; any_to_float(\"5.5\", 2.3)\n        5.5\n        &gt;&gt;&gt; any_to_float(\"test\", 0)\n        0\n\n    Args:\n        s (Any): The value to cast.\n\n    Returns:\n        float: The value as a float, or the default if the value is not a number.\"\"\"\n    if not is_number(default):\n        msg = f\"Default must be of type `float` [{default}]\"\n        raise TypeError(msg)\n    try:\n        value_float = float(s)\n    except ValueError:\n        value_float = default\n\n    return value_float\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.is_number","title":"<code>is_number(s)</code>","text":"<p>Check if a value can be coerced into a number type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_number(10)\nTrue\n&gt;&gt;&gt; is_number(\"hello\")\nFalse\n&gt;&gt;&gt; is_number(Decimal(\"3.14\"))\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>Any</code> <p>The value to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the value can be coerced into a number type, False otherwise.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def is_number(s: Any) -&gt; bool:\n    \"\"\"Check if a value can be coerced into a number type.\n\n    Examples:\n        &gt;&gt;&gt; is_number(10)\n        True\n        &gt;&gt;&gt; is_number(\"hello\")\n        False\n        &gt;&gt;&gt; is_number(Decimal(\"3.14\"))\n        True\n\n    Args:\n        s (Any): The value to check.\n\n    Returns:\n        bool: True if the value can be coerced into a number type, False otherwise.\"\"\"\n    if s is None:\n        return False\n    try:\n        float(s)\n    except ValueError:\n        return False\n    else:\n        return True\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.ratio_to_whole","title":"<code>ratio_to_whole(ratio)</code>","text":"<p>Convert a ratio to a whole number.</p> <p>This is useful for converting a ratio to a percentage.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ratio_to_whole(0.03)\n3\n&gt;&gt;&gt; ratio_to_whole(Decimal(\"1\"))\n100\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>ratio</code> <code>(Decimal, float, str)</code> <p>The ratio to be converted.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The whole number.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def ratio_to_whole(ratio: T) -&gt; T:\n    \"\"\"Convert a ratio to a whole number.\n\n    This is useful for converting a ratio to a percentage.\n\n    Examples:\n        &gt;&gt;&gt; ratio_to_whole(0.03)\n        3\n        &gt;&gt;&gt; ratio_to_whole(Decimal(\"1\"))\n        100\n\n    Args:\n        ratio (Decimal, float, str): The ratio to be converted.\n\n    Returns:\n        The whole number.\n    \"\"\"\n    multiplier = Decimal(\"100\") if isinstance(ratio, Decimal) else 100\n\n    return ratio * multiplier\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.set_zero","title":"<code>set_zero(value)</code>","text":"<p>Set a value to a true Decimal zero if it is zero.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; set_zero(0)\nDecimal('0')\n&gt;&gt;&gt; set_zero(0.0)\nDecimal('0')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>(int, float, str)</code> <p>The value to be checked.</p> required <p>Returns:</p> Type Description <code>Decimal</code> <p>The value as a Decimal if it is zero, otherwise the original value.</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def set_zero(value: T) -&gt; Decimal:\n    \"\"\"Set a value to a true Decimal zero if it is zero.\n\n    Examples:\n        &gt;&gt;&gt; set_zero(0)\n        Decimal('0')\n        &gt;&gt;&gt; set_zero(0.0)\n        Decimal('0')\n\n    Args:\n        value (int, float, str): The value to be checked.\n\n    Returns:\n        The value as a Decimal if it is zero, otherwise the original value.\"\"\"\n    decimal_from_string = Decimal(str(value))\n\n    if decimal_from_string == Decimal(0):\n        return Decimal()\n\n    return decimal_from_string\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.trim_trailing_zeros","title":"<code>trim_trailing_zeros(value)</code>","text":"<p>Remove trailing zeros from a decimal value.</p> <p>This is useful for ensuring that a value can be safely compared with another value.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trim_trailing_zeros(3.1400)\nDecimal('3.14')\n&gt;&gt;&gt; trim_trailing_zeros(Decimal(\"3.1400\"))\nDecimal('3.14')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>(float, Decimal, str)</code> <p>The value to be trimmed.</p> required <p>Returns:</p> Type Description <code>Decimal</code> <p>The trimmed value. Decimal</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def trim_trailing_zeros(value: T) -&gt; Decimal:\n    \"\"\"Remove trailing zeros from a decimal value.\n\n    This is useful for ensuring that a value can be safely compared with another value.\n\n    Examples:\n        &gt;&gt;&gt; trim_trailing_zeros(3.1400)\n        Decimal('3.14')\n        &gt;&gt;&gt; trim_trailing_zeros(Decimal(\"3.1400\"))\n        Decimal('3.14')\n\n    Args:\n        value (float, Decimal, str): The value to be trimmed.\n\n    Returns:\n        The trimmed value. Decimal\n    \"\"\"\n    return Decimal(str(value)).normalize()\n</code></pre>"},{"location":"utils/numbers/#django_rubble.utils.numbers.whole_to_ratio","title":"<code>whole_to_ratio(whole)</code>","text":"<p>Convert a whole number to a ratio.</p> <p>This is useful for converting a percentage to a ratio.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; whole_to_ratio(3)\n0.03\n&gt;&gt;&gt; whole_to_ratio(100)\n1\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>(Decimal, float, str)</code> <p>The whole number to be converted.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The ratio. Decimal</p> Source code in <code>django_rubble\\utils\\numbers.py</code> <pre><code>def whole_to_ratio(whole: T) -&gt; T:\n    \"\"\"Convert a whole number to a ratio.\n\n    This is useful for converting a percentage to a ratio.\n\n    Examples:\n        &gt;&gt;&gt; whole_to_ratio(3)\n        0.03\n        &gt;&gt;&gt; whole_to_ratio(100)\n        1\n\n    Args:\n        whole (Decimal, float, str): The whole number to be converted.\n\n    Returns:\n        The ratio. Decimal\n    \"\"\"\n    multiplier = Decimal(\"100\") if isinstance(whole, Decimal) else 100\n    return whole / multiplier\n</code></pre>"}]}